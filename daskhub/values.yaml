# DaskHub configuration values
# ----------------------------
rbac:
  enabled: true  # Create and use roles and service accounts on an RBAC-enabled cluster.

jupyterhub:
  # JupyterHub configuration goes here.
  # See https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
  hub:
    # These environment variables are declared in templates/daskhub-configmap.yaml
    # They are eventually set in the singleuser environment.
    extraEnv:  # Configure JupyterHub to work with Dask Gateway.
      - name: DASK_GATEWAY__ADDRESS
        valueFrom:
          configMapKeyRef:
            name: daskhub-config
            key: DASK_GATEWAY__ADDRESS
      - name: DASK_GATEWAY__PROXY_ADDRESS
        valueFrom:
          configMapKeyRef:
            name: daskhub-config
            key: DASK_GATEWAY__PROXY_ADDRESS
      - name: DASKHUB_JUPYTERHUB_SERVICE_GATEWAY_URL
        valueFrom:
          configMapKeyRef:
            name: daskhub-config
            key: DASKHUB_JUPYTERHUB_SERVICE_GATEWAY_URL

    extraConfig:
      # Register Dask Gateway service and setup singleuser environment.
      00-add-dask-gateway-values: |
        import os

        # Adds a few variables to singluser.ExtraEnv which depend on the release name.
        for key in ["DASK_GATEWAY__ADDRESS", "DASK_GATEWAY__PROXY_ADDRESS"]:
            c.KubeSpawner.environment[key] = os.environ[key]

        # Adds Dask Gateway as a JupyterHub service to make the gateway available at
        # {HUB_URL}/services/dask-gateway
        for service in c.JupyterHub.services:
            if service["name"] == "dask-gateway":
                if not service.get("url", None):
                    print("Adding dask-gateway service URL")
                    service["url"] = os.environ["DASKHUB_JUPYTERHUB_SERVICE_GATEWAY_URL"]
                break
        else:
            print("dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?")

  singleuser:
    image:
      name: pangeo/base-notebook  # Image to use for singleuser environment. Must include dask-gateyway.
      tag: 2020.07.28
    defaultUrl: "/lab"  # Use jupyterlab by defualt.
    extraEnv:
      DASK_GATEWAY__PUBLIC_ADDRESS: "/services/dask-gateway/"  # Sets the Dask dashboard link in cluster and client reprs.
      DASK_GATEWAY__AUTH__TYPE: "jupyterhub"  # Use JupyterHub to authenticate with Dask Gateway.

dask-gateway:
  enabled: true  # Enabling dask-gateway will install Dask Gateway as a dependency.
  # Futher Dask Gateway configuration goes here
  # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
  gateway:
    prefix: "/services/dask-gateway"  # Users connect to the Gateway through the JupyterHub service.
    auth:
      type: jupyterhub  # Use JupyterHub to authenticate with Dask Gateway
  traefik:
    service:
      type: ClusterIP  # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.

dask-kubernetes:
  # Use dask-kubernetes, rather than Dask Gateway, for creating Dask Clusters.
  # Enabling this also requires
  # 1. Setting `jupyterhub.singleuser.serviceAccountName: daskkubernetes`.
  # 2. Ensuring that `dask-kubernetes` is in your singleuser environment.
  enabled: false
